// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	url "net/url"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Store is a mock of Store interface.
type Store struct {
	ctrl     *gomock.Controller
	recorder *StoreMockRecorder
}

// StoreMockRecorder is the mock recorder for Store.
type StoreMockRecorder struct {
	mock *Store
}

// NewStore creates a new mock instance.
func NewStore(ctrl *gomock.Controller) *Store {
	mock := &Store{ctrl: ctrl}
	mock.recorder = &StoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Store) EXPECT() *StoreMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *Store) Clear(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *StoreMockRecorder) Clear(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*Store)(nil).Clear), arg0)
}

// Get mocks base method.
func (m *Store) Get(arg0 context.Context, arg1 *url.URL) (*url.URL, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *StoreMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Store)(nil).Get), arg0, arg1)
}

// Load mocks base method.
func (m *Store) Load(arg0 context.Context, arg1 map[*url.URL]*url.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *StoreMockRecorder) Load(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*Store)(nil).Load), arg0, arg1)
}

// Put mocks base method.
func (m *Store) Put(ctx context.Context, obscured, original *url.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, obscured, original)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *StoreMockRecorder) Put(ctx, obscured, original interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*Store)(nil).Put), ctx, obscured, original)
}

// Remove mocks base method.
func (m *Store) Remove(arg0 context.Context, arg1 *url.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *StoreMockRecorder) Remove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*Store)(nil).Remove), arg0, arg1)
}

// Size mocks base method.
func (m *Store) Size(arg0 context.Context) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *StoreMockRecorder) Size(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*Store)(nil).Size), arg0)
}
